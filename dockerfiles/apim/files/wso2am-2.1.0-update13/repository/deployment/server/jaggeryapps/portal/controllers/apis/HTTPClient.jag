<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * This HTTPClient contains the wrappers for back end http calls.
 */
(function () {

    var log = new Log("/controllers/apis/HTTPClient.jag");
    var carbon = require('carbon');
    var configs = require('/configs/designer.json');
    var constants = require("/modules/constants.js");
    var RESTClientInvoker = require("/controllers/apis/RESTClientInvoker.jag").RESTClientInvoker;
    var utils = require('/modules/utils.js');
    var tokenUtil = require("/modules/tokenUtil.js").tokenUtil;
    var uri = request.getRequestURI();
    var uriMatcher = new URIMatcher(String(uri));
    var method = request.getMethod();

    tokenUtil.isUserAuthorized(function (status) {
        if (!status) {
            response.status = constants.HTTP_USER_NOT_AUTHENTICATED;
            response.content = sendErrorMessage("You have not login to the wso2 dashboard server yet");
            return;
        }
    });

    if (uriMatcher.match("/HTTPClient") && method === constants.HTTP_POST) {
        method = request.getContent().actionMethod;
        var targetURL = request.getContent().actionUrl;
        var payload = request.getContent().actionPayload;
        var contentType = request.getHeader(constants.CONTENT_TYPE_IDENTIFIER);
        response.contentType = contentType;
        var acceptType = request.getHeader(constants.ACCEPT_IDENTIFIER);
        if (method == undefined && targetURL == undefined && request.getContent()) {
            method = parse(request.getContent()).actionMethod;
            targetURL = parse(request.getContent()).actionUrl;
            payload = parse(request.getContent()).actionPayload;
        }
        if (method == undefined && targetURL == undefined) {
            response.status = constants.HTTP_BAD_REQUEST;
            response.content = sendErrorMessage("Please specify target URL and HTTP Verb which needs to be called");
            return;
        } else {
            if (log.isDebugEnabled()) {
                log.debug("method: " + method);
                log.debug("targetURL: " + targetURL);
                log.debug("payload: " + stringify(payload));
            }
            try {
                switch (method) {
                    case constants.HTTP_GET:
                        RESTClientInvoker.HTTPClient.GET(
                                targetURL, function (responsePayload) {
                                    response.status = responsePayload.status;
                                    response.content = responsePayload.responseText;
                                },
                                function (responsePayload) {
                                    response.status = responsePayload.status;
                                    response.content = responsePayload.responseText;
                                },
                                contentType,
                                acceptType);
                        break;
                    case constants.HTTP_POST:
                        RESTClientInvoker.HTTPClient.POST(
                                targetURL, payload, function (responsePayload) {
                                    response.status = responsePayload.status;
                                    response.content = responsePayload.responseText;
                                },
                                function (responsePayload) {
                                    response.status = responsePayload.status;
                                    response.content = responsePayload.responseText;
                                },
                                contentType,
                                acceptType);
                        break;
                    case constants.HTTP_PUT:
                        RESTClientInvoker.HTTPClient.PUT(
                                targetURL, payload, function (responsePayload) {
                                    response.status = responsePayload.status;
                                    response.content = responsePayload.responseText;
                                },
                                function (responsePayload) {
                                    response.status = responsePayload.status;
                                    response.content = responsePayload.responseText;
                                },
                                contentType,
                                acceptType);
                        break;
                    case constants.HTTP_DELETE:
                        RESTClientInvoker.HTTPClient.DELETE(
                                targetURL, function (responsePayload) {
                                    response.status = responsePayload.status;
                                    response.content = responsePayload.responseText;
                                },
                                function (responsePayload) {
                                    response.status = responsePayload.status;
                                    response.content = responsePayload.responseText;
                                },
                                contentType,
                                acceptType);
                        break;
                }
            } catch (e) {
                log.error("Exception occurred while accessing back end service" + e);
                response.status = constants.HTTP_INTERNAL_ERROR;
                response.content = sendErrorMessage("Exception occurred while accessing back end service");
                return;
            }
        }
    } else {
        response.status = constants.HTTP_BAD_REQUEST;
        response.content = sendErrorMessage("HTTP Verb : " + method + " doesn't support for this operation");
        return;
    }

    function sendErrorMessage(message) {
        return {"message": message};
    }

}());
%>
