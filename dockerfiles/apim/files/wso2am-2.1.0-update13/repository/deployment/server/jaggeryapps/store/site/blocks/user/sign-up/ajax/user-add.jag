<%
include("/jagg/jagg.jag");
var i18n = require("i18n");
var localeResourcesBasePath="/site/conf/locales/jaggery/";
i18n.init(request,localeResourcesBasePath);
var log = new Log();

var validation = {
    "action": { type: "safetext"},
    "username": { type: "name"},
    "password": { type: "password"},
};

var validation_errors = jagg.validateInputs(validation);

(function () {
    response.contentType = "application/json; charset=UTF-8";
    response.addHeader('Pragma', 'No-cache');
    response.addHeader('Cache-control', 'no-cache');
    var mod, obj, password, allFieldsValues, result, username,
            msg = require("/site/conf/ui-messages.jag"),
            action = request.getParameter("action"),showWorkflowTip,
            user = jagg.getUser();
    if( request.getMethod() == 'POST' && !jagg.isCSRFTokenValid()){
        print({
            error:true,
            message: msg.error.csrfError
        });
    }
    else if(validation_errors != true){
        print({
            error:true,
            message: msg.error.invalidInputs(validation_errors)
        });        
    }            
    else if (action == "addUser" && request.getMethod() == 'POST') {

        username = request.getParameter("username");
        password = request.getParameter("password");
		allFieldsValues = request.getParameter("allFieldsValues");
        
        mod = jagg.module("user");
        var userExist = mod.checkIfUserExsits(username);
        if(userExist) {
            result = {
                error : true,
                message : "User name already exists"
            };          
       
        } else {
             result = mod.addUser(username, password, allFieldsValues);
             subscriberCheckResult = mod.checkIfSubscriberRolePresent(username);
        }
       

        if (result.error) {
            obj = {
                error:true,
                message:result.message
            };
        } else {
            if(subscriberCheckResult.error){
                showWorkflowTip = true;
            }else{
                showWorkflowTip = false;
            }
            obj = {
                error:false,
                showWorkflowTip:showWorkflowTip
            };
        }
        print(obj);
    } else {
        print({
            error:true,
            message:msg.error.invalidAction(action)
        });
    }
}());
%>
