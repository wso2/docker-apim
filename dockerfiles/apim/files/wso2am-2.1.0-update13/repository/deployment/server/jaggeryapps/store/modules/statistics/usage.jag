<%
log = new Log(),
apiStore = jagg.module("manager").getAPIStoreObj(),
usageClient = jagg.module("manager").getUsageClient(),
user = jagg.getUser();
var gson = com.google.gson.Gson();
var site = require("/site/conf/site.json");

function getFirstAccessTime(providerName, server) {
    var usage = [];
    var usageout = [];
    try {
        if(usageClient == null) {
            return {
                error:true
            };
        }
        usage = usageClient.getFirstAccessTime(providerName);

        if (log.isDebugEnabled()) {
            log.debug("getProviderAPIFirstAccessTime for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {
            usage = JSON.parse(gson.toJson(usage));
            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}


function getAppApiCallType(subscriberName,from,to, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = usageClient.getAppApiCallType(subscriberName,server,from,to,10 );
        if (log.isDebugEnabled()) {
            log.debug("getAppApiCallType for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {
            usage = JSON.parse(gson.toJson(usage));
            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}





function getPerAppAPIFaultCount(subscriberName,from,to, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = usageClient.getPerAppAPIFaultCount(subscriberName,server,from,to,10 );
        if (log.isDebugEnabled()) {
            log.debug("getPerAppAPIFaultCount for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {
            usage = JSON.parse(gson.toJson(usage));
            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}



function getProviderAPIUsage(subscriberName,from,to, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = usageClient.perAppPerAPIUsage(subscriberName,server,from,to,10 );
        if (log.isDebugEnabled()) {
            log.debug("getProviderAPIUsage for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {
            usage = JSON.parse(gson.toJson(usage));
            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getTopAppUsers(subscriberName,from,to, server) {
    var usage = [];
    var usageout = [];
    var chartlimit = -1;

    if (site.statistics != null && site.statistics.topAppUserLimit != null) {
        chartlimit = site.statistics.topAppUserLimit; 
    }

    try {
        usage = usageClient.getTopAppUsers(subscriberName,server,from,to,chartlimit);
        if (log.isDebugEnabled()) {
            log.debug("getTopAppUsers for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {
            usage = JSON.parse(gson.toJson(usage));
            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getPerAppSubscribers(subscriberName,from,to, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = usageClient.getPerAppSubscribers(subscriberName, server);
        if (log.isDebugEnabled()) {
            log.debug("getPerAppSubscribers for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {
            usage = JSON.parse(gson.toJson(usage));
            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function isDataPublishingEnabled(providerName, server) {

    var usage = [];
    var usageout = [];
    try {
        usage = org.wso2.carbon.apimgt.usage.client.UsageClient.isDataPublishingEnabled();
        if (log.isDebugEnabled()) {
            log.debug("isDataPublishingEnabled check");
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}



%>