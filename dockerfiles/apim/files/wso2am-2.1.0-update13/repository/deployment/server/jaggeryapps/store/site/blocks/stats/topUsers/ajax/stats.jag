<%
include("/jagg/jagg.jag");
log = new Log();

(function () {
    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, result,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json"),
            msg = require("/site/conf/ui-messages.jag")

    if (jagg.getUser() == null) {
        print({
                  error:true,
                  message:'timeout'
              });
    } else {

    var validation = {
        "action": { type: "safetext"},
    };

    var validation_errors = jagg.validateInputs(validation);
           
    if(validation_errors != true){
        print({
            error:true,
            message: msg.error.invalidInputs(validation_errors)
        });        
    }
    else if (action === "getTopAppUsers") {
        mod = jagg.module("statistics");
        var subscriber = jagg.getUser().username;
        var from = request.getParameter("fromDate");
        var to = request.getParameter("toDate");
        var groupId = session.get("groupId");
        result = mod.getTopAppUsers(subscriber,from,to,groupId);

        if (result.error == "true") {
            obj = {
                error:result.error,
                message:msg.error.backendError(action)
            };
        } else {
            //processing the data for the charts.
            var chartlimit = -1;
            if (site.statistics != null && site.statistics.topAppUserPieChartLimit != null) {
                chartlimit = site.statistics.topAppUserPieChartLimit; 
            }
            
            for (var k = 0; k < result.usage.length; k++){

                    var dataLength = result.usage[k].userCountArray.length;
                    var chartData=[];
                    var chartTableRows = '';
                    var i = 0;
                    var largeDataSet = false;
                    for (i = 0; i < dataLength; i++) {

                        chartTableRows += '<tr><td>' +  result.usage[k].userCountArray[i].user + '</td><td class="tdNumberCell">' +result.usage[k].userCountArray[i].count + '</td></tr>';
                        if(chartlimit == -1 || i < chartlimit){
                            chartData.push({"userName":result.usage[k].userCountArray[i].user,
                                "count":parseInt( result.usage[k].userCountArray[i].count)});
                        }

                    }
                    if(dataLength >= 1000){
                        largeDataSet = true;
                    }
                    result.usage[k].chartTableRows = chartTableRows;
                    result.usage[k].chartData = chartData;
                    result.usage[k].largeDataSet = largeDataSet;


                }
            obj = {
                error:false,
                usage:result.usage
            }
        }
        print(obj);


    } else if (action === "getPerAppSubscribers") {
        mod = jagg.module("statistics");
        var subscriber = jagg.getUser().username;
        var from = request.getParameter("fromDate");
        var to = request.getParameter("toDate");
        var groupId = session.get("groupId");
        result = mod.getPerAppSubscribers(subscriber,from,to,groupId);

        if (result.error == "true") {
            obj = {
                error:result.error,
                message:msg.error.backendError(action)
            };
        } else {
            obj = {
                error:false,
                usage:result.usage
            }
        }
        print(obj);


    }else if (action === "getFirstAccessTime") {
        mod = jagg.module("statistics");
        var subscriber = jagg.getUser().username;
        result = mod.getFirstAccessTime(subscriber);

        if (result.error == "true") {
            obj = {
                error:result.error,
                message:msg.error.backendError(action)
            };
        } else {
            obj = {
                error:false,
                usage:result.usage
            }
        }
        print(obj);

    } else if (action === "isDataPublishingEnabled") {
            mod = jagg.module("statistics");
            result = mod.isDataPublishingEnabled();
            
            if (result.error == "true") {
                obj = {
                    error: result.error,
                    message: msg.error.backendError(action)
                };
            } else {
                obj = {
                    error: false,
                    usage: result.usage
                }
            }
            print(obj);

        }
    else {
        print({
                  error:true,
                  message:msg.error.invalidAction(action)
              });
    }
    }
}());
%>
