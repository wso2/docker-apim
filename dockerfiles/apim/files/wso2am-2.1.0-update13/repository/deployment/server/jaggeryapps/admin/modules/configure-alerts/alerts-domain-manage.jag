<%
var log = new Log();

var getDomainSpecificConfigurationsInfo = function (domainName) {
    try {
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;
        var dasUrl = APIUtil.getAnalyticsServerURL();
        var username = APIUtil.getAnalyticsServerUserName();
        var password = APIUtil.getAnalyticsServerPassword();

        var stub = new org.wso2.carbon.event.template.manager.stub.TemplateManagerAdminServiceStub(dasUrl + "/services/TemplateManagerAdminService");

        var client = stub._getServiceClient();
        var options = client.getOptions();
        var authenticator = new org.apache.axis2.transport.http.HttpTransportProperties.Authenticator();
        authenticator.setUsername(username);
        authenticator.setPassword(password);
        authenticator.setPreemptiveAuthentication(true);
        options.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
        client.setOptions(options);
        var configInfo = stub.getConfigurationInfos(domainName);
        return configInfo;

    } catch (ex) {
        var message = "Error occurred while Retrieving Domain Specific Configuration DTO (Cause:" + ex.message + ")";
        log.error(message);
        return {
            error: true,
            message: message
        };
    }
};



var getDomainTemplates = function (domainName) {
        try {
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;
        var dasUrl = APIUtil.getAnalyticsServerURL();
        var username = APIUtil.getAnalyticsServerUserName();
        var password = APIUtil.getAnalyticsServerPassword();

        var stub = new org.wso2.carbon.event.template.manager.stub.TemplateManagerAdminServiceStub(dasUrl + "/services/TemplateManagerAdminService");

        var client = stub._getServiceClient();
        var options = client.getOptions();
        var authenticator = new org.apache.axis2.transport.http.HttpTransportProperties.Authenticator();
        authenticator.setUsername(username);
        authenticator.setPassword(password);
        authenticator.setPreemptiveAuthentication(true);
        options.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
        client.setOptions(options);
        var domainTemplates = stub.getDomainInfo(domainName).getScenarioInfoDTOs();
        return domainTemplates;

    } catch (ex) {
        var message = "Error occurred while Retrieving Domain template DTO (Cause:" + ex.message + ")";
        log.error(message);
        return {
            error: true,
            message: message
        };
    }
};



var deleteConfiguration = function (domainName, configurationName) {
        try {
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;
        var dasUrl = APIUtil.getAnalyticsServerURL();
        var username = APIUtil.getAnalyticsServerUserName();
        var password = APIUtil.getAnalyticsServerPassword();

        var stub = new org.wso2.carbon.event.template.manager.stub.TemplateManagerAdminServiceStub(dasUrl + "/services/TemplateManagerAdminService");

        var client = stub._getServiceClient();
        var options = client.getOptions();
        var authenticator = new org.apache.axis2.transport.http.HttpTransportProperties.Authenticator();
        authenticator.setUsername(username);
        authenticator.setPassword(password);
        authenticator.setPreemptiveAuthentication(true);
        options.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
        client.setOptions(options);
        stub.deleteConfiguration(domainName, configurationName);

        var deletionSuccessMessage = "Domain Configuration successfully deleted. Name of the configuration : "+ configurationName;
        return {
            error: false
        }

    } catch (ex) {
        var message = "Error occurred while Deleting Alert Configuration (Cause:" + ex.message + ")";
        log.error(message);
        return {
            error: true,
            message: message
        };
    }
};


%>