<%
jagg.module("api", {

    addAPI:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").addAPI.apply(this, arguments);
    },
    removeAPI:function () {
        return jagg.require(jagg.getModulesDir() + "api/remove.jag").removeAPI.apply(this, arguments);
    },

    isContextExist:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").isContextExist.apply(this, arguments);
    },
    isApiNameExist:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").isApiNameExist.apply(this, arguments);
    },
    isURLValid:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").isURLValid.apply(this, arguments);
    },

    copyAPI:function () {
        return jagg.require(jagg.getModulesDir() + "api/copy.jag").copyAPI.apply(this, arguments);
    },

    getAPI:function () {
        return jagg.require(jagg.getModulesDir() + "api/list.jag").getAPI.apply(this, arguments);
    },
      getAllPaginatedAPIs:function () {
        return jagg.require(jagg.getModulesDir() + "api/list.jag").getAllPaginatedAPIs.apply(this, arguments);
    },

    getAPIsByProvider:function () {
        return jagg.require(jagg.getModulesDir() + "api/list.jag").getAPIsByProvider.apply(this, arguments);
    },

    getAllAPIs:function () {
        return jagg.require(jagg.getModulesDir() + "api/list.jag").getAllAPIs.apply(this, arguments);
    },

    updateAPI:function () {
        return jagg.require(jagg.getModulesDir() + "api/update.jag").updateAPI.apply(this, arguments);
    },
    isAPIUpdateValid:function () {
        return jagg.require(jagg.getModulesDir() + "api/update.jag").isAPIUpdateValid.apply(this, arguments);
    },
    updateAPIStatus:function () {
        return jagg.require(jagg.getModulesDir() + "api/life-cycles.jag").updateAPIStatus.apply(this, arguments);
    },
    getAPILC:function () {
        return jagg.require(jagg.getModulesDir() + "api/life-cycles.jag").getAPILC.apply(this, arguments);
    },
    updateExternalAPIStores:function () {
        return jagg.require(jagg.getModulesDir() + "api/update.jag").updateExternalAPIStores.apply(this, arguments);
    },
    getLifeCyclesEvents:function () {
        return jagg.require(jagg.getModulesDir() + "api/life-cycles.jag").getLifeCyclesEvents.apply(this, arguments);
    },
    getAPILCData:function () {
            return jagg.require(jagg.getModulesDir() + "api/life-cycles.jag").getAPILCData.apply(this, arguments);
        },
    setCheckListItemVal:function () {
            return jagg.require(jagg.getModulesDir() + "api/life-cycles.jag").setCheckListItemVal.apply(this, arguments);
        },
    getTiers:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").getTiers.apply(this, arguments);
    },
    getResourceTiers:function () {
            return jagg.require(jagg.getModulesDir() + "api/add.jag").getResourceTiers.apply(this, arguments);
    },
    isAPIOlderVersionExist:function () {
        return jagg.require(jagg.getModulesDir() + "api/life-cycles.jag").isAPIOlderVersionExist.apply(this, arguments);
    },
    isPublisherAccessControlEnabled:function () {
        return jagg.require(jagg.getModulesDir() + "api/check-permissions.jag").isPublisherAccessControlEnabled.apply(this, arguments);
    },
    hasCreatePermission:function () {
        return jagg.require(jagg.getModulesDir() + "api/check-permissions.jag").hasCreatePermission.apply(this, arguments);
    },
    hasManageTierPermission:function () {
        return jagg.require(jagg.getModulesDir() + "api/check-permissions.jag").hasManageTierPermission.apply(this, arguments);
    },
    hasUserPermissions:function () {
        return jagg.require(jagg.getModulesDir() + "api/check-permissions.jag").hasUserPermissions.apply(this, arguments);
    },
    hasPublishPermission:function () {
        return jagg.require(jagg.getModulesDir() + "api/check-permissions.jag").hasPublishPermission.apply(this, arguments);
    },
    showStoreURL:function () {
        return jagg.require(jagg.getModulesDir() + "api/check-permissions.jag").showStoreURL.apply(this, arguments);
    },
    showAPIDocVisibility:function () {
        return jagg.require(jagg.getModulesDir() + "api/check-permissions.jag").showAPIDocVisibility.apply(this, arguments);
    },
    updatePermissionCache:function () {
        return jagg.require(jagg.getModulesDir() + "api/check-permissions.jag").updatePermissionCache.apply(this, arguments);
    },
    validateRoles:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").validateRoles.apply(this, arguments);
    },
    getCustomInSequences:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").getCustomInSequences.apply(this, arguments);
    },
    getCustomOutSequences:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").getCustomOutSequences.apply(this, arguments);
    },getCustomCombinedInSequences:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").getCustomCombinedInSequences.apply(this, arguments);
    },
    getCustomCombinedOutSequences:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").getCustomCombinedOutSequences.apply(this, arguments);
    },
    getCustomCombinedFaultSequences:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").getCustomCombinedFaultSequences.apply(this, arguments);
    },
    isSynapseGateway:function () {
    	return jagg.require(jagg.getModulesDir() + "api/add.jag").isSynapseGateway.apply(this, arguments);
    },
    getCustomFaultSequences:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").getCustomFaultSequences.apply(this, arguments);
    },
     isSynapseGateway:function () {
     	return jagg.require(jagg.getModulesDir() + "api/add.jag").isSynapseGateway.apply(this, arguments);
    },
    isDataPublishingEnabled:function () {
 	return jagg.require(jagg.getModulesDir() + "api/add.jag").isDataPublishingEnabled.apply(this, arguments);
     },
    createAPI:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").createAPI.apply(this, arguments);
    },
    updateAPIDesign:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").updateAPIDesign.apply(this, arguments);
    },
    getOpenAPIDefinitionResource:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").getOpenAPIDefinitionResource.apply(this, arguments);
    },     
    updateAPIImplementation:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").updateAPIImplementation.apply(this, arguments);
    },
    manageAPI:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").manageAPI.apply(this, arguments);
    } ,
    checkIfResourceExists:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").checkIfResourceExists.apply(this, arguments);
    } ,
    isMultipleTenantsAvailable:function(){
	return jagg.require(jagg.getModulesDir() + "api/add.jag").isMultipleTenantsAvailable.apply(this, arguments);
    },
    isScopeExist:function(){
	return jagg.require(jagg.getModulesDir() + "api/add.jag").isScopeExist.apply(this, arguments);
    },
    getGatewayURL:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").getGatewayURL.apply(this, arguments);
    },
    getAPILCStatus:function () {
        return jagg.require(jagg.getModulesDir() + "api/life-cycles.jag").getAPILCStatus.apply(this, arguments);
    },
    getAPILevelPolicies:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").getAPILevelPolicies.apply(this, arguments);
    },
    isGlobalCEPThrottlingEnabled:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").isGlobalCEPThrottlingEnabled.apply(this, arguments);
    },
    uploadSequenceFile:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").uploadSequenceFile.apply(this, arguments);
    },
    getAPILCWorkflowStatus:function () {
        return jagg.require(jagg.getModulesDir() + "api/life-cycles.jag").getAPILCWorkflowStatus.apply(this, arguments);
    },
    deleteWorkflowTask:function () {
        return jagg.require(jagg.getModulesDir() + "api/life-cycles.jag").deleteWorkflowTask.apply(this, arguments);
    },
    uploadCertificate:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").uploadCertificate.apply(this, arguments);
    },
    deleteCertificate:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").deleteCertificate.apply(this, arguments);
    },
    getCertificate:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").getCertificate.apply(this, arguments);
    },
    getCertificates:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").getCertificates.apply(this, arguments);
    },
    isConfigured:function () {
        return jagg.require(jagg.getModulesDir() + "api/add.jag").isConfigured.apply(this, arguments);
    }
});
%>
