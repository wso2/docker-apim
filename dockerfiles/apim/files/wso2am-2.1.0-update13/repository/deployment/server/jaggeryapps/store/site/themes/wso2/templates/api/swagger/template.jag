<% jagg.template("api/swagger", function(inputs, outputs, jagg) {

var log = new Log();
var site = require("/site/conf/site.json");
var host = site.hostname;

var subscriptions = outputs.subscriptions;
var protocol = "http";

function getLocation(href) {
    var match = href.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)(\/[^?#]*)(\?[^#]*|)(#.*|)$/);
    return match && {
        protocol: match[1],
        host: match[2],
        hostname: match[3],
        port: match[4],
        pathname: match[5],
        search: match[6],
        hash: match[7]
    }
}

function validateHostName(match, host) {
    var log = new Log();
    var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
    var carbonUtils = new CarbonUtils();
    var hostName = carbonUtils.getServerConfiguration().getFirstProperty("HostName");
    var process = require('process');
        if ((hostName != null && match.host.split(":")[0].equals(hostName.split(":")[0]))
            || isWhiteListedHost(match.host.split(":")[0])
                || match.host.split(":")[0].equals(process.getProperty('carbon.local.ip').split(":")[0])) {
            return host;
        } else if (isReverseProxyEnabled()) {
            var proxyHost = site.reverseProxy.host;
            if (!match.host.split(":")[0].equals(proxyHost)) {
                log.warn("Possible HOST Header Attack is identified with reverse proxy enabled. Hence, rewriting to default reverse proxy host in configuration.");
                host = proxyHost;
            }
            return match.protocol + "//" + host;
        } else if (site.reverseProxy.enabled == "auto" || site.reverseProxy.enabled == false) {
            log.warn("Possible HOST Header Attack is identified. Hence, rewriting to default host in configuration. site.reverseProxy.enabled = " + site.reverseProxy.enabled);
            if (hostName) {
                host = hostName + ":" + process.getProperty('mgt.transport.https.port');
            } else {
                host = process.getProperty('carbon.local.ip') + ":" + process.getProperty('mgt.transport.https.port');
            }
            return match.protocol + "//" + host;
        } else {
            return host;
        }
};

var isWhiteListedHost = function (host) {
    var whiteListedHostNames = site.whiteListedHostNames;
    for (var i = 0; i < whiteListedHostNames.length; i++) {
        if(host.equals(whiteListedHostNames[i])) {
            return true;
        }
    }
    return false;
};

var isReverseProxyEnabled = function() {
    var reverse_proxy;
    if(reverse_proxy != undefined) {
        return reverse_proxy;
    }
    if (site.reverseProxy.enabled) {
        if (site.reverseProxy.enabled == "auto") {
            var xfwd = request.getHeader("X-Forwarded-Host");
            if (xfwd != null) {
                xfwd = xfwd.split(",")[0];
                reverse_proxy = true;
                site.reverseProxy.host = xfwd.trim();
            } else {
                reverse_proxy = false;
            }
        } else {
            reverse_proxy = true;
        }
    } else {
        reverse_proxy = false;
    }
    return reverse_proxy;
};


var url = request.getRequestURL();
var match = getLocation(url);
var host = match.host;
if (site.reverseProxy.enabled != "auto") {
    host = validateHostName(match, host);
}

var port = request.getLocalPort();
var secure = request.isSecure()
if(secure){
    protocol = "https";
}

var apiName = outputs.api.name;
var providerValUe = outputs.api.provider;
var version = outputs.api.version;
var APIUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;
providerValUe = APIUtil.replaceEmailDomain(providerValUe);
var authorizationHeader = outputs.authorizationHeader;

    if(providerValUe.indexOf("@") > -1){
        providerValUe = providerValUe.replace("@","%40");
    }

//Calling the jaggery API

var swaggerAPI ;
if (providerValUe.indexOf("/") > -1 || apiName.indexOf("/") > -1) {
    swaggerAPI = jagg.url("/api-docs" + "?provider=" + encodeURIComponent(providerValUe) + "&name=" + encodeURIComponent(apiName) + "&version=" + encodeURIComponent(version));
} else {
    swaggerAPI = jagg.url("/api-docs" + "/" + providerValUe + "/" + apiName + "/" + version);
}

var api = outputs.api;%>
  <script type="text/javascript">

    var setIntervalId;
    var enjoyhint_instance_swagger = null;

    function runEnjoyHintScript_swaggerUi() {
        if (isEnjoyHintEnabled()) {
            var isApiConsoleTabClicked = localStorage.getItem("isApiConsoleTabClicked");

            if (isApiConsoleTabClicked === 'true' && $('#tab1').is(':visible')) {
                runEnjoyHintScript(enjoyhint_instance_swagger, swagger_script_data);
                clearInterval(setIntervalId);
                removeLocalStorageVariables();
            }
        }
    }

  var load_swagger_ui = function(url) {
      window.swaggerUI = SwaggerUIBundle({
          url: url,
          dom_id: '#swagger-ui-container',
          deepLinking: true,
          presets: [
              SwaggerUIBundle.presets.apis
          ],
          requestInterceptor: function(request) {
              //Intercept the request and inject Bearer token
              var authorizationHeader = <%=stringify(outputs.authorizationHeader)%>;
              var key = $("#access_token").val();
              if (key && key.trim() != "") {
                  request.headers[authorizationHeader] = "Bearer " + key;
              } else {
                  request.headers[authorizationHeader] = "Bearer ";
              }
              return request;
          },
          onComplete: function(){
              runEnjoyHintScript_swaggerUi();
          },
          plugins: [
              function() {
                  return {
                      components: {
                          Models: function() {
                              return null
                          },
                          schemes: function() {
                              return null
                          },
                          authorizeBtn: function() {
                              return null
                          },
                          info: function() {
                              return null
                          }
                      }
                  }
              }
          ]
      });
  }

  $(document).ready(function(){
     load_swagger_ui("<%=swaggerAPI%>");
  });
  </script>
<div class="row">
<% if(api.status != "PROTOTYPED"){ %>

<script language="javascript">
$(document).ready(function(){

	$('.env_name').selectpicker();
  var change_token = function(){
    $(".notoken").hide();
    var option = $("#sub_app_list option:selected");
    var type = $("#key_type").val();
    var key = option.attr("data-"+type);
    if(key == "null"){
      $(".notoken").show("slow");
      $("#access_token").val("");
    }else{
      $("#access_token").val(key);
    }
    $("#access_token").trigger("change");
  };

var show_environments = function(){
    var type = $(".keytype option:selected").val();
    $("#environment_name").children('option').hide();
    $("#environment_name").children("option[class='" + type + "']").show();
    $("#environment_name").children("option[class='hybrid']").show();
    var options = $("#environment_name").children("option[class='hybrid'], option[class='" + type + "']");
      if (options.length < 2) {
        $(".env_name").hide();
        $(".OnEnvironment").hide();
      }
    if(options.length > 1){
     options[0].selected = true;
     $(".OnEnvironment").show();
     $(".btn-group.env_name").show();
    } else if ($("#environment_name").children("option[class='hybrid']").length > 0) {
        $("#environment_name").children("option[class='hybrid']")[0].selected = true;
    } else if($("#environment_name").children("option[class='" + type + "']").length > 0) {
      $("#environment_name").children("option[class='" + type + "']")[0].selected = true;
    }else{
      $(".env_name").hide();
      $(".OnEnvironment").hide();
    }
    $(".env_name").selectpicker("refresh");
    select_environment();
  };

var select_environment = function() {
    var selectedEnvironment = $("#environment_name");
    var name = selectedEnvironment.val();
    var swaggerURL = window.swaggerUI.getConfigs().url;
    var envSwaggerURL = "";
    if (swaggerURL.indexOf("?") != -1) {
        if (swaggerURL.indexOf("envName") != -1) {
            envSwaggerURL = swaggerURL.split("envName")[0] + "envName=" + name;
        } else {
            envSwaggerURL = swaggerURL + "&envName=" + name;
        }
    } else {
        envSwaggerURL = swaggerURL + "?envName=" + name;
    }

    //Load swagger spec for given environment
    load_swagger_ui(envSwaggerURL);
    change_token();
};

  $(".subapp").change(change_token);
  $(".keytype").change(show_environments);
  $(".env_name").change(select_environment);
  show_environments();
});

function checkOnKeyPress(e) {
    if (e.which == 13 ||e.keyCode == 13) {
        return false;
    }
}
</script>
<div id="authorizations" class="col-md-12 col-lg-12">

<% if(subscriptions != null && subscriptions.length > 0) { %>
<form class="form-horizontal">
      <div class="form-group">
          <label for="" class="col-sm-3 control-label">Try</label>
          <div class="col-sm-9">
            <select id="sub_app_list" class="form-control subapp">
              <% for(var i = 0 ;subscriptions.length > i;i++){
                    var applicationTxt = "";
                    if (jagg.isMultiGroupEnabled()) {
                        applicationTxt = encode.forHtml(subscriptions[i].application)
                                        + " (" + encode.forHtml(subscriptions[i].owner)+") "
                    } else {
                        applicationTxt = encode.forHtml(subscriptions[i].application);
                    }

            %>
                <option value="" data-sandbox="<%=subscriptions[i].SANDBOX_KEY%>" data-production="<%=subscriptions[i].PRODUCTION_KEY%>">
                     <%= applicationTxt%>
                </option>
              <% }  %>
            </select>
          </div>
      </div>
      <div class="form-group">
        <label for="" class="col-sm-3 control-label">Using</label>
            <div class="col-sm-9">
            <div class="input-group">
              <select id="key_type" class="form-control keytype">
                      <option value="production">Production</option>
                      <option value="sandbox">Sandbox</option>
              </select>
              <div class="input-group-addon">Key</div>
              </div>
            </div>
      </div>
      <div class="form-group">
        <label for="" class="col-sm-3 control-label OnEnvironment">On Environment</label>
        <div class="col-sm-9">
          <select id="environment_name" class="env_name">
                <%
                var envir = JSON.parse(api.serverURL);
                for(var types in envir){
                  var endpointType=envir[types];
                  for(var endpoint in endpointType){
                      if(endpointType[endpoint]["showInConsole"]){
                      %>
                         <option value="<%=encode.forHtmlAttribute(endpoint)%>" class="<%=types%>"><%=encode.forHtml(endpoint)%></option>
                      <% }
                  }
                }
                %>
          </select>
        </div>
      </div>
</form>
    <!--
    <div class="form-group">
      <label class="col-sm-3 control-label"><label for="">Try</label></label>
      <div class="col-sm-9">
        <select id="sub_app_list" class="inline">
        <% for(var i = 0 ;subscriptions.length > i;i++){ %>
          <option value="" data-sandbox="<%= encode.forHtmlAttribute(subscriptions[i].SANDBOX_KEY) %>" data-production="<%= encode.forHtmlAttribute(subscriptions[i].PRODUCTION_KEY) %>"><%= encode.forHtml(subscriptions[i].application)%></option>
        <% } %>
        </select>
        <label> On </label>
        <select id="key_type">
          <option value="production">Production</option>
          <option value="sandbox">Sandbox</option>
        </select>
        <label> Environment. </label>
      </div>
    </div>

    -->
    <% }else if(jagg.getUser() != null){ %>
        <div class="message message-info remove-margin-top">
            <h4><i class="icon fw fw-info"></i>Notice </h4>
            <p><%=i18n.localize("Please subscribe to the API to generate an access token.")%>&nbsp;<%=i18n.localize("If you already have an access token, please provide it below.")%></p>
        </div>
    <% }else{ %>
        <div class="message message-info remove-margin-top">
            <h4><i class="icon fw fw-info"></i>Notice</h4>
            <p><%=i18n.localize("You require an access token to try the API. Please login and subscribe to the API to generate an access token.")%> &nbsp; <%=i18n.localize("If you already have an access token, please provide it below.")%></p>
        </div>
    <% } %>
        <div class="alert alert-warning hide notoken">
        <button type="button" class="close" data-dismiss="alert"><i class="fw fw-cancel"></i></button>
        <strong><%=i18n.localize("Warning!")%> </strong>
            <%=i18n.localize("The selected application does not have an access token for the selected environment. Please go to the subscription page and generate an access token first.")%>
        </div>



        <form class="form-horizontal">
          <div class="form-group">
            <label class="col-sm-3 control-label">Set Request Header</label>
            <div class=" col-sm-9">
            <div class="input-group">
              <span class="input-group-addon" id="sizing-addon1"><%=authorizationHeader%> : Bearer</span>
              <input type="text" id="access_token" name="access_token" title="access_token" placeholder="Access Token" class="form-control" onkeypress="return checkOnKeyPress(event)">
            </div>
            </div>
          </div>
        </form>
    </div>

    <% } %>
<div class="col-md-12 col-lg-12">
    <div class="swagger-section">
    <div id="message-bar" class="swagger-ui-wrap">&nbsp;</div>
    <div id="Download" style="float:right;font-size:14px"><a title="swagger" href='<%=encode.forHtmlAttribute(swaggerAPI)%>' target="_blank" style="font-size:14px"><i class="icon-share-alt" ></i> Swagger ( /swagger.json )</a></div>
    <div id="swagger-ui-container" class="swagger-ui-wrap"></div>
</div>
</div>
</div>
<%  }); %>
