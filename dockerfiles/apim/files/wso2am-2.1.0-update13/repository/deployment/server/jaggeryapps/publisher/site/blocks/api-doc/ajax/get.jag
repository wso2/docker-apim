<%
response.addHeader('Cache-Control', 'no-cache, no-store, must-revalidate'); // HTTP 1.1.
response.addHeader('Pragma', 'no-cache'); // HTTP 1.0.
response.addHeader('Expires', '0');
include("/jagg/jagg.jag");

// Jaggery API for retrieving API Definition
var log = new Log();

(function () {
    response.contentType = "application/json; charset=UTF-8";
    var action = request.getParameter("action");
    var site = require("/site/conf/site.json");
    var carbon = require('carbon');
    var uri = request.getRequestURI();
    var callPath = uri.replace(site.context + "/api-docs", "");
    var action;

    if (uri != null) {
        // replacing @ signs for matcher to work with reverse proxies
        if (callPath.indexOf("@") > -1) {
            callPath = callPath.replace("@", "%40");
        }
        var uriMatcher = new URIMatcher(callPath);
        var providerVal, apiNameVal, apiVersionVal;
        providerVal = apiNameVal = apiVersionVal = "";

        if (uriMatcher.match("/{providerVal}/{apiNameVal}/{apiVersionVal}")) {
            providerVal = uriMatcher.elements().providerVal;
            apiNameVal = uriMatcher.elements().apiNameVal;
            apiVersionVal = uriMatcher.elements().apiVersionVal;
        } else if (request.getParameter("provider") != null) {
            providerVal = request.getParameter("provider");
            apiNameVal = request.getParameter("name");
            apiVersionVal = request.getParameter("version");
        } else {
            // Invalid URL
            action = "exit";
        }

        if (action == "exit") {
            response.sendError(404);
        } else {
            var url = request.getRequestURL();
            var tenantDomain;
            var tenantID = -1234;
            var isTenantFlowStarted = false;
            var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
            var APIUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;
            var data;

            if (providerVal.indexOf("@") > -1) {
                providerVal = APIUtil.replaceEmailDomain(providerVal);
            }

            tenantDomain = MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(providerVal));

            if (tenantDomain) {
                tenantID = carbon.server.osgiService('org.wso2.carbon.user.core.service.RealmService').
                getTenantManager().getTenantId(tenantDomain);
            }

            if (providerVal.indexOf("-DOM-") > -1) {
                providerVal = providerVal.replace("-DOM-", "/");
            }

            try {
                //start tenant flow before fetching swagger resource from the registry
                if (tenantDomain != "" && tenantDomain != 'carbon.super') {
                    var PrivilegedCarbonContext = Packages.org.wso2.carbon.context.PrivilegedCarbonContext;
                    isTenantFlowStarted = true;
                    PrivilegedCarbonContext.startTenantFlow();
                    PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true);
                }

                var APIUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;
                var apiUtil = new APIUtil();
                var swaggerPath = apiUtil.getSwagger20DefinitionFilePath(apiNameVal, apiVersionVal, providerVal);
                var registry = carbon.server.osgiService('org.wso2.carbon.registry.core.service.RegistryService').
                getGovernanceUserRegistry("wso2.anonymous.user", tenantID);
                url = swaggerPath + "swagger.json";
                data = registry.get(url);
            } finally {
                if (isTenantFlowStarted) {
                    PrivilegedCarbonContext.endTenantFlow();
                }
            }
            var output = new Packages.java.lang.String(data.content);
            var jsonObj = JSON.parse(output);
            print(JSON.stringify(jsonObj));
        }
    }
}());
%>
