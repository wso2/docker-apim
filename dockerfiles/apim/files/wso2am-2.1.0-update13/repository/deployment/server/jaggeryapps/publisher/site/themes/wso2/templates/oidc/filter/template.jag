<% jagg.template("oidc/filter", function(inputs, outputs, jagg) { %>
<%
    var site = require("/site/conf/site.json");
    var security =require("oidc");

    var ssoRelyingParty = new security.OIDCRelyingParty(site.oidcConfiguration.issuer);
    var isAuthenticated = jagg.getUser() != null;
    var i18n = require("i18n");
    var localeResourcesBasePath="/site/conf/locales/jaggery/";
    i18n.init(request,localeResourcesBasePath);

    // this value comes back in the id token and is checked there
    var nonce = ssoRelyingParty.createNonce();

    // this value comes back in the auth code response
    var state = ssoRelyingParty.createState();

	var requestURI;
	var requestedPage = request.getParameter("requestedPage");

	if(requestedPage!=null){
	requestURI = requestedPage;
	}else{
	  requestURI = request.getRequestURI();
	  if(request.getQueryString()!=null){
	    requestURI =requestURI+'?'+request.getQueryString();
	  }
	}

    session.put("NONCE", nonce);
    session.put("STATE", state);
    session.put("PUBLISHER_REDIRECT_URI", requestURI)


    var checkSSO = true;

    if (requestURI.indexOf("register.jag") != -1) {
        checkSSO = false;
    } else if (requestURI.indexOf("confirmemail.jag") != -1) {
        checkSSO = false;
    }

	if (checkSSO && !Boolean(isAuthenticated)) {

	    ssoRelyingParty.setProperty("identityProviderUri", site.oidcConfiguration.identityProviderURI);
	    ssoRelyingParty.setProperty("authorizationEndpointUri", site.oidcConfiguration.authorizationEndpointURI);
	    ssoRelyingParty.setProperty("tokenEndpointURI", site.oidcConfiguration.tokenEndpointURI);
	    ssoRelyingParty.setProperty("userInfoURI", site.oidcConfiguration.userInfoURI);
	    ssoRelyingParty.setProperty("jwksURI", site.oidcConfiguration.jwksURI);

        ssoRelyingParty.setProperty("client_id", site.oidcConfiguration.clientConfiguration.clientId);
        ssoRelyingParty.setProperty("client_secret", site.oidcConfiguration.clientConfiguration.clientSecret);
	    ssoRelyingParty.setProperty("response_type", site.oidcConfiguration.clientConfiguration.responseType);
	    ssoRelyingParty.setProperty("authorization_type", site.oidcConfiguration.clientConfiguration.authorizationType);
	    ssoRelyingParty.setProperty("scope", site.oidcConfiguration.clientConfiguration.scope);
	    ssoRelyingParty.setProperty("redirect_uri", site.oidcConfiguration.clientConfiguration.redirectURI);

        var authRequest = ssoRelyingParty.buildAuthRequestUrl(nonce, state);
        if(site.oidcConfiguration.authHttpMethod == "GET") {
            %>
                <div>
                    <p><%= i18n.localize("You are now redirected to Identity Provider")%></p>
		        <form method="get" action="<%=site.oidcConfiguration.authorizationEndpointURI%>">
					<input type="hidden" name="response_type" value="<%=site.oidcConfiguration.clientConfiguration.responseType%>"/>
					<input type="hidden" name="client_id" value="<%=site.oidcConfiguration.clientConfiguration.clientId%>"/>
					<input type="hidden" name="scope" value="<%=site.oidcConfiguration.clientConfiguration.scope%>"/>
					<input type="hidden" name="redirect_uri" value="<%=site.oidcConfiguration.clientConfiguration.redirectURI%>"/>
					<input type="hidden" name="nonce" value="<%=nonce%>"/>
					<input type="hidden" name="state" value="<%=state%>"/>
		        </form>
	    	</div>
	        <% } else { %>
		        <div>
					 <p><%= i18n.localize("You are now redirected to Identity. If the redirection fails, please click the POST button.")%></p>
		        	 <form method="post" action="<%=authRequest%>">
						 <button type="submit"><%= i18n.localize("POST")%></button>
		     		 </form>

		    	</div>
		    <% } %>
			<script type = "text/javascript" >
				   document.forms[0].submit();
			</script>

<%  }  %>
<% }); %>


