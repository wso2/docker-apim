<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
        <%
(function () {
    include("jagg.jag");
    var site = require("/site/conf/site.json");
    var log = new Log();

    var authorizationCode = request.getParameter("code");
    var state = request.getParameter("state");


    // check for state, if it doesn't match we bail early
    if (session.get("STATE") != state) {
        log.error("STATE does not match. Hence redirecting to error page. Sign-in fails.");
        response.sendRedirect("../site/pages/error-pages/401.html");
        return;
    }



    // create a sso relying party js object
    var security = require("oidc");
    var oidcRelyingParty = new security.OIDCRelyingParty(site.oidcConfiguration.issuer);

    var sessionId = session.getId();
    var requestedURI = session.get("PUBLISHER_REDIRECT_URI");

    if (requestedURI == null) {
        log.error("requestedURI value is invalid.");
        requestedURI = "/store";
    }

    // Check OIDC signature valid and set session as a authenticated if success
    var isSignatureValid = oidcRelyingParty.validateOIDCSignature(authorizationCode, session.get("NONCE"), sessionId);

    if (!Boolean(isSignatureValid)) {
        log.error("OIDC signature is verification failed.");
        response.sendRedirect("../site/pages/error-pages/401.html");
        return;
    }

    session.put("showLogin", "false");
    var api = jagg.module("api");

    var isUserCreatePermitted = api.hasUserPermissions(oidcRelyingParty.getLoggedInUser(sessionId));


    //First check whether user is having sufficent permissions [create/publish]
    if (isUserCreatePermitted.permitted) {
        jagg.setUser({username: oidcRelyingParty.getLoggedInUser(sessionId), cookie: null});
        session.put("LOGGED_IN_USER", oidcRelyingParty.getLoggedInUser(sessionId));
    } else {
       oidcRelyingParty.invalidateSessionBySessionId(sessionId);
       response.sendRedirect("../site/pages/error-pages/403.html");
       return;
    }

    var isCreatePermitted = api.hasCreatePermission();
    var isPublishPermitted = api.hasPublishPermission();
    var showStoreURL = api.showStoreURL();
    var hasTierPermission = api.hasManageTierPermission();
    jagg.setCreatePermitted(isCreatePermitted);
    jagg.setPublishPermitted(isPublishPermitted);
    jagg.setManageTierPermitted(hasTierPermission);
    jagg.setShowStoreURL(showStoreURL);
    response.sendRedirect(requestedURI);

}());
%>
</body>
</html>


