<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");

var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
/**
 * Returns boolean value of isEmailUserNameEnabled
 * @return boolean isEmailUserNameEnabled
 */
var isEmailUserNameEnabled = function () {
    if (application.get("isEmailUserNameEnabled") != null) {
        return Boolean(application.get("isEmailUserNameEnabled"));
    }
    application.put("isEmailUserNameEnabled", cloudConfig.isEmailUserNameEnabled);
    return Boolean(application.get("isEmailUserNameEnabled"));
};

var getAuthServerURL = function() {
    return getAPIStoreObj().getAuthServerURL();
};

var getHTTPsURL = function() {
    var url = request.getRequestURL();
    var match = getLocation(url);
    var host = match.host;
    if (site.reverseProxy.enabled != "auto") {
        host = validateHostName(match, host);
    }
    return getAPIStoreObj().getHTTPsURL(host);
};

var getHTTPURL = function() {
    return getAPIStoreObj().getHTTPURL();
};

var getHostname = function() {
    return getAPIStoreObj().getHostName();
};

function getLocation(href) {
    var match = href.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)(\/[^?#]*)(\?[^#]*|)(#.*|)$/);
    return match && {
        protocol: match[1],
        host: match[2],
        hostname: match[3],
        port: match[4],
        pathname: match[5],
        search: match[6],
        hash: match[7]
    }
};

var getAPIPublisherURL = function() {
    var result,log=new Log();
    var store = getAPIStoreObj();
    try {
    result = store.getAPIPublisherURL();
    if (log.isDebugEnabled()) {
    log.debug("getAPIPublisherURL : ");
    }
    return {
    error:false,
    url:result
    };
    } catch (e) {
    return {
    error:true,
    message:e.message.split(":")[1]
    };
    }

};

var getServer = function() {
    return {
        server : "localhost",
        port : "9443"
    };
};

var isSelfSignupEnabled = function(){
	return 	getAPIStoreObj().isSelfSignupEnabled();
};

var isSelfSignupEnabledForTenantUser = function(tenantDomain){
    var log = new Log();
    try {

        if (tenantDomain == null) {
             return  getAPIStoreObj().isSelfSignupEnabledForTenant("carbon.super");
        } else {
             return  getAPIStoreObj().isSelfSignupEnabledForTenant(tenantDomain);
        }
    } catch (e) {
        log.error(e.message);
        return false;
    }


};

var getAdminCookie = function() {
    //TODO : this should be set in the Context during the deployment

};

var getAPIStoreObj = function() {

    var tenantDomain = jagg.getTenantDomain();
    var user = jagg.getUser();
    var store;
    if (user == null) {
        store = require('apistore');
        var storeHostObj = new store.APIStore();
        if(tenantDomain != null && tenantDomain != ""){
            storeHostObj.loadRegistryOfTenant(tenantDomain);
        }
        return storeHostObj;
    } else {
        store = require('apistore');
        return new store.APIStore(user.username);
    }
};

var getAPIConsumerObj = function() {
    var user = jagg.getUser();

    var APIManagerFactory = Packages.org.wso2.carbon.apimgt.impl.APIManagerFactory;

    return APIManagerFactory.getInstance().getAPIConsumer(user);
};

var loadTenantRegistry = function (tenantDomain) {
    try {
        if (tenantDomain != null && tenantDomain != "") {
            getAPIStoreObj().loadRegistryOfTenant(tenantDomain);
            return
            {
                error:false
            }
            ;
        }
    } catch (e) {
        return {
            error:true,
            message:e.message
        };
    }
};

var loadTenantAxisConfiguration = function (tenantDomain) {

    try {
        if (tenantDomain != null && tenantDomain != "") {

           getAPIStoreObj().loadAxisConfigOfTenant(String(tenantDomain));
            return
            {
                error:false
            }
            ;
        }
    } catch (e) {
        return {
            error:true,
            message:e.message
        };
    }
};

var getActiveTenantDomains=function(){
    var tenantDomains,
    		log = new Log(),
            store = jagg.module("manager").getAPIStoreObj();

	try {
		tenantDomains = store.getActiveTenantDomains();
        tenantDomains = parse(stringify(tenantDomains));
        if (log.isDebugEnabled()) {
            log.debug("isTenantMode : " + stringify(api));
        }

        return {
            error:false,
            tenantDomains:tenantDomains
        };
    } catch (e) {
        //log.error(e.message);
        return {
            error:true,
            tenantDomains:null,
            message:e.message
        };
    }

};

var getUsageClient = function() {
    var user = jagg.getUser();
    return org.wso2.carbon.apimgt.usage.client.UsageClient.getClient(user);
}

var isForumEnabled = function() {
    return org.wso2.carbon.apimgt.impl.utils.APIUtil.isStoreForumEnabled();
}

var getAPIProviderObj = function() {
    var user = jagg.getUser();
    var store;
    if (user == null) {
        store = require('apipublisher');
        return new store.APIProvider();
    } else {
        store = require('apipublisher');
        return new store.APIProvider(user.username);
    }
};

/**
 * Returns the userName from the given email
 * @param email
 * @return String userName
 */
var getUserNameFromEmail = function (email) {
    if (isEmailUserNameEnabled()) {
        return email;
    } else {
        return email.replace(/@/g, ".");
    }
};

function validateHostName(match, host) {
     var log = new Log();
     var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
     var carbonUtils = new CarbonUtils();
     var hostName = carbonUtils.getServerConfiguration().getFirstProperty("HostName");
     var process = require('process');
     if ((hostName != null && match.host.split(":")[0].equals(hostName.split(":")[0]))
        || isWhiteListedHost(match.host.split(":")[0])
            || match.host.split(":")[0].equals(process.getProperty('carbon.local.ip').split(":")[0])) {
         return host;
     } else if (isReverseProxyEnabled()) {
         var proxyHost = site.reverseProxy.host;
         if (!match.host.split(":")[0].equals(proxyHost)) {
             log.warn("Possible HOST Header Attack is identified with reverse proxy enabled. Hence, rewriting to default reverse proxy host in configuration.");
             host = proxyHost;
         }
         return match.protocol + "//" + host;
     } else if (site.reverseProxy.enabled == "auto" || site.reverseProxy.enabled == false) {
        log.warn("Possible HOST Header Attack is identified. Hence, rewriting to default host in configuration. site.reverseProxy.enabled = " + site.reverseProxy.enabled);
        if (hostName) {
            host = hostName + ":" + process.getProperty('mgt.transport.https.port');
        } else {
            host = process.getProperty('carbon.local.ip') + ":" + process.getProperty('mgt.transport.https.port');
        }
        return match.protocol + "//" + host;
     } else {
        return host;
     }
};

var isWhiteListedHost = function (host) {
    var whiteListedHostNames = site.whiteListedHostNames;
    for (var i = 0; i < whiteListedHostNames.length; i++) {
        if(host.equals(whiteListedHostNames[i])) {
            return true;
        }
    }
    return false;
};

var isReverseProxyEnabled = function() {
    var reverse_proxy;
    if (reverse_proxy != undefined) {
        return reverse_proxy;
    }
    if (site.reverseProxy.enabled) {
        if(site.reverseProxy.enabled == "auto") {
            var xfwd = request.getHeader("X-Forwarded-Host");
            if(xfwd != null) {
                var xfwd = xfwd.split(",")[0];
                reverse_proxy = true;
                site.reverseProxy.host = xfwd.trim();
            } else {
                reverse_proxy = false;
            }
        } else {
            reverse_proxy = true;
        }
    } else {
        reverse_proxy = false;
    }
    return reverse_proxy;
};
%>