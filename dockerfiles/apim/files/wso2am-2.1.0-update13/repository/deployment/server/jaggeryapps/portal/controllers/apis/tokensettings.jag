<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
function getApplicationKeyAndSecret(){
    var log = new Log();
    var ws = require('ws');
    var config = require('/configs/designer.json');
    var dashboards = require('/modules/dashboards.js');
    var usr = require('/modules/user.js');

    // check whether the user is logged in
    var user = usr.current();
    if (!user) {
        return "UNAUTHORIZED_ERROR";
    }

    // match url for patterns
    var matcher = new URIMatcher(request.getRequestURI());
    if (matcher.match('/tokensettings/{id}')) {
        var vars = matcher.elements();
        var dashboardId = vars.id;
        var dashboard = dashboards.getAsset(dashboardId);
        if (dashboard == null) {
            return "unable to find the dashboard";
        }

        var idpURL = config.authentication.methods.sso.attributes.identityProviderURL;
        var applicationName = dashboard.id;
        var oauthSettings = config.oauth;
        var isURL = "";
        if (endsWith(idpURL, "samlsso/")) {
            isURL = idpURL.substr(0, idpURL.lastIndexOf("samlsso/"));
        } else if (endsWith(idpURL, "samlsso")) {
            isURL = idpURL.substr(0, idpURL.lastIndexOf("samlsso"));
        }
        isURL = endsWith(isURL, "/") ? isURL : isURL + "/";
        dashboard.identityServerUrl = isURL;
        dashboard.enableOauth = true;

        var ids = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.2;
        options.useWSA = 1.0;
        options.mep = 'in-only';
        options.action = "urn:registerOAuthApplicationData";
        var payload = '<xsd:registerOAuthApplicationData xmlns:xsd="http://org.apache.axis2/xsd" xmlns:xsd1="http://dto.oauth.identity.carbon.wso2.org/xsd"><xsd:application><xsd1:OAuthVersion>Oauth-2.0</xsd1:OAuthVersion><xsd1:applicationName>' + applicationName + '</xsd1:applicationName><xsd1:callbackUrl> </xsd1:callbackUrl><xsd1:grantTypes>authorization_code implicit password client_credentials refresh_token urn:ietf:params:oauth:grant-type:saml2-bearer iwa:ntlm</xsd1:grantTypes></xsd:application></xsd:registerOAuthApplicationData>';

        try {
            ids.open(options, isURL + "services/OAuthAdminService", false, oauthSettings.username, oauthSettings.password);
            ids.send(payload);
        } catch (e) {
            log.info(e);
        }

        var ids2 = new ws.WSRequest();
        var optionsAppData = new Array();
        optionsAppData.useSOAP = 1.2;
        optionsAppData.useWSA = 1.0;
        optionsAppData.action = "urn:getOAuthApplicationDataByAppName";
        var payloadAppData = '<xsd:getOAuthApplicationDataByAppName xmlns:xsd="http://org.apache.axis2/xsd"><xsd:appName>' + applicationName + '</xsd:appName></xsd:getOAuthApplicationDataByAppName>';
        var resultAppData;

        try {
            ids2.open(optionsAppData, isURL + "services/OAuthAdminService", false, oauthSettings.username, oauthSettings.password);
            ids2.send(payloadAppData);
            resultAppData = ids2.responseE4X;
            var consumerKey = resultAppData..*::oauthConsumerKey[0].toString();
            var consumerSecret = resultAppData..*::oauthConsumerSecret[0].toString();

            dashboard.apiKey = consumerKey;
            dashboard.apiSecret = consumerSecret;
            dashboard.accessTokenUrl = isURL + "oauth2/token";
        } catch (e) {
            dashboard.apiKey = "";
            dashboard.apiSecret = "";
            dashboard.accessTokenUrl = "";
            log.info(e);
        }

        dashboards.update(dashboard);
        return {"accessTokenUrl": dashboard.accessTokenUrl, "key": dashboard.apiKey, "secret": dashboard.apiSecret};
    }
}

function endsWith(str, suffix){
    return str.indexOf(suffix, str.length - suffix.length) != -1;
}

print(getApplicationKeyAndSecret());
%>