<%
var getAPIDescription = function (api, username) {
    var swaggerString,
    		log = new Log(),
            store = jagg.module("manager").getAPIStoreObj();
	
	try {
		var encode = require('encode');
    		encode = new encode.Encode();
        	var api2 = store.getAPI(api.provider, api.name, api.version, username);

        if (log.isDebugEnabled()) {
            log.debug("getAPI : " + stringify(api));
        }
        var api= api2[0];
        var uriTemplates = api2[1];
        return {
            error:false,
            api:api,
            uriTemplates:uriTemplates,
            message:null
        };
    } catch (e) {
        //log.error(e.message);
        return {
            error:true,
            api:null,
            message:e.message
        };
    }
};

var getTiers = function () {
    var tier,tiers,list=[],log = new Log(),
            provider = jagg.module("manager").getAPIStoreObj();
        var tenant = jagg.getTenantDomain();
        var log = new Log();
    try {
        tiers = provider.getTiers(tenant);
        if (log.isDebugEnabled()) {
            log.debug("getTiers " +  " : " + stringify(tiers));
        }


        return {
            error:false,
            tiers:tiers
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            tiers:null
        };
    }
};

var getResourceTiers = function () {
    var tiers, log = new Log();
    var tier;
    var tierArray = [];
    var store;
    var i;
    var username;

    try {

        if (user != null) {
            username = user.username;
            store = org.wso2.carbon.apimgt.impl.APIManagerFactory.getInstance().getAPIConsumer(username);
        } else {
            var tenant = jagg.getTenantDomain();
            username = "anonymous";
            store = org.wso2.carbon.apimgt.impl.APIManagerFactory.getInstance().getAPIConsumer();
        }

        var tiers = store.getTiers(org.wso2.carbon.apimgt.impl.APIConstants.TIER_RESOURCE_TYPE, username);
        var tierList = org.wso2.carbon.apimgt.impl.utils.APIUtil.sortTiers(tiers);

        for(i = 0; i < tierList.size(); i++) {
            tier = {};
            tier.tierName = tierList.get(i).getName();
            tier.tierDisplayName = tierList.get(i).getDisplayName();
            tier.tierDescription = tierList.get(i).getDescription() != null ? tierList.get(i).getDescription() : "";
            tier.defaultTier = (i == 0);
            tierArray[i] = tier;
        }

        if (log.isDebugEnabled()) {
            log.debug("getTiers : " + stringify(tierArray));
        }
        return {
            error:false,
            tiers:tierArray
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            tiers:null
        };
    }
};

var getAPIEndpointURLs = function (api, username) {
    var log = new Log(),
            store = jagg.module("manager").getAPIStoreObj();
	
	try {
		var encode = require('encode');
    		encode = new encode.Encode();
        	var endpointURLs = store.getAPIEndpointURLs(api.provider, api.name, api.version, username);
		        
        if (log.isDebugEnabled()) {
            log.debug("getAPIEndpointURLs : " + stringify(endpointURLs));
        }

        return {
            error:false,
            endpointURLs:endpointURLs
        };
    } catch (e) {
        return {
            error:true,
            api:null,
            message:e.message
        };
    }
};
var getAllPaginatedAPIs = function (tenantDomain, start, end, returnAPITags,state) {
    var list, i, length, api, result,
            log = new Log(),
            store = jagg.module("manager").getAPIStoreObj();

    try {
        result = store.getAllPaginatedAPIs(tenantDomain,String(start),String(end), returnAPITags,state);
        if (log.isDebugEnabled()) {
            log.debug("getAllPublishedAPIs : " + stringify(result.apis));
        }

        return {
            error:false,
            result:result
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            result:null
        };
    }
};


var getAPI = function (api) {
    var api, result, defaultVersion,
            log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();

    try {
        result = provider.getAPI(api.provider, api.name, api.version);
        defaultVersion=provider.getDefaultAPIVersion(api.provider, api.name);
        hasDefaultVersion=(defaultVersion!=null);
        if (log.isDebugEnabled()) {
            log.debug("getAPI : " + stringify(result));
        }

        api = {
            name:result[0],
            version:result[4],
            description:result[1],
            endpoint:result[2],
            wsdl:result[3],
            tags:result[5],
            availableTiers:result[6],
            status:result[7],
            thumb:result[8],
            context:result[9],
            lastUpdated:result[10],
            subs:result[11],
            templates:result[12],
            sandbox:result[13],
            tierDescs:result[14],
            bizOwner:result[15],
            bizOwnerMail:result[16],
            techOwner:result[17],
            techOwnerMail:result[18],
            wadl:result[19],
            visibility:result[20],
            roles:result[21],
            tenants:result[22],
            epUsername:result[23],
            epPassword:result[24],
            endpointTypeSecured:result[25],
            provider:result[26],
            transport_http:result[27],
            transport_https:result[28],
            apiStores:result[29],
            inSequence:result[30],
            outSequence:result[31],
            subscriptionAvailability:result[32],
            subscriptionTenants:result[33],
            endpointConfig:result[34],
            responseCache:result[35],
            cacheTimeout:result[36],
            availableTiersDisplayNames:result[37],
            faultSequence:result[38],
            destinationStats:result[39],
            resources:result[40],
            scopes:result[41],
            isDefaultVersion:result[42],
            implementation:result[43],
            environments:result[44],
            productionTps:result[46],
            sandboxTps:result[47],
            endpointAuthTypeDigest:result[48],
            corsConfiguration:result[49],
            hasDefaultVersion:hasDefaultVersion,
            currentDefaultVersion:defaultVersion,
            availableSubscriptionPolicy:result[50],
            apiLevelPolicy:result[51],
            authorizationHeader:result[56]
        };
        return {
            error:false,
            api:api
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            api:null,
            message:e.message.split(":")[1]
        };
    }
};


%>
